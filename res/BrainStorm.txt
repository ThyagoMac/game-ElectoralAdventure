Setup e gráficos
Finalizando sprites
Classe spritesheet, player e entity
Eventos do teclado e controlando player
Manipulando direções e animações
Iniciando com mapa
Tiles e validando posições
Entities no mapa
Camera
Clamp e otimizando renderização do mapa
Player collision
Inteligência artificial
Colisão ente inimigos
Animando inimigos
Sistema de dano
UI para o jogo
Coletando life pack e incrementando vida
Fonte smooth e coletar ammo
Feedbacks e reiniciando jogo com game over
Coletando arma
Atirando bullets com teclado / mouse
Destruindo inimigos
Feedback inimigos
Alternando levels
Game over 
Criando sistema de menu com navegação
Ações no menu e pausar jogo
Música e efeitos sonoros

-----------

1-Art (sprites)
2-Player's System animation 
3-Controls(keyboard) - attack - spells - itens - pause - menu
4-System map creation
5-Levels
6-Enemies
7-Boss
8-inventory
9-progression (lvl/item)
10-damage/life
11-Save/Load
12-Audio?/Song? -- ??

-----------






=================BASIC CODE FOR GAME=========================

package br.com.ElectoralAdventure.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;

	private static JFrame frame;
	private Thread thread;
	private boolean isRunning;
	private final int WIDTH = 240;
	private final int HEIGHT = 160;
	private final int SCALE = 3;

	private BufferedImage image;

	public Game() {
		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		initFrame();
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	}

	private void initFrame() {
		frame = new JFrame("Electoral Adventure v0.0.0");
		frame.add(this);
		frame.setResizable(false);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}

	public synchronized void start() {
		thread = new Thread(this);
		isRunning = true;
		thread.start();
	}

	public synchronized void stop() {
		isRunning = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		Game game = new Game();
		game.start();
	}

	public void tick() {

	}

	public void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = image.getGraphics();
		g.setColor(new Color(0, 0, 0));
		g.fillRect(0, 0, WIDTH, HEIGHT);

		// Graphics2d g2 = (Graphics2d) g;

		g.dispose();
		g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, WIDTH * SCALE, HEIGHT * SCALE, null);
		bs.show();
	}

	@Override
	public void run() {
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double nanoSeconds = 1000000000 / amountOfTicks;
		double delta = 0;
		int frames = 0;
		double timer = System.currentTimeMillis();
		while (isRunning) {
			long now = System.nanoTime();
			delta += (now - lastTime) / nanoSeconds;
			lastTime = now;
			if (delta >= 1) {
				tick();
				render();
				frames++;
				delta--;
			}
			
			if (System.currentTimeMillis() - timer >= 1000) {
				System.out.println("FPS: " + frames);
				frames = 0;
				timer+=1000;
			}
		}
		stop();
	}

}
